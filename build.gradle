plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'com.tetkole'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext.javafxVersion = "17.0.2"

ext {
    junitVersion = '5.8.2'
    Download = de.undercouch.gradle.tasks.download.Download
    download = download
}

apply from: "${rootDir}/gradle/package.gradle"
apply from: "${rootDir}/gradle/jre.gradle"
apply from: "${rootDir}/gradle/installer.gradle"

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'com.tetkole.tetkole'
    mainClass = 'com.tetkole.tetkole.Main'
}

javafx {
    version = javafxVersion
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.media']
}

dependencies {

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    implementation 'ws.schild:jave-all-deps:3.3.1'
    implementation 'org.json:json:20220924'

}

test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

jar {
    enabled=true
    manifest {
        attributes(
                "Implementation-Title": "TÃ¨tKole",
                "Implementation-Vendor": "Univ. Grenoble Alpes - LIG - GETALP",
                "Main-Class": 'application.Main',
                "Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' '),
                "JavaFX-Version": javafxVersion,
                "Built-By": System.properties['user.name']
        )
    }
}

distributions {
    windows {
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/tetkole-windows.bat") {
                into 'bin'
            }
            from("build/jre/windows") {
                into 'lib/jre'
            }
        }
    }

    linux {
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/tetkole-linux.sh") {
                into 'bin'
            }
            from("build/jre/linux-x64") {
                into 'lib/jre'
            }
        }
    }
}

tasks.jar.dependsOn('createLicence')

task createLicence(dependsOn: ['processResources'], type: Copy, group: 'license') {
    from("${rootDir}/gradle/templates/licence.txt")
    expand([
            "date"   : new Date().format('yyyy-MM-dd')
    ])
    into("${processResources.destinationDir}/data/common")
}

task('downloadAndExtractLinuxDependecies').dependsOn('downloadAndExtractLinuxJREwithLibavPlugin')

windowsDistZip.dependsOn(downloadAndExtractWindowsJRE)
linuxDistTar.dependsOn(downloadAndExtractLinuxDependecies)

tasks.withType(Tar){
    compression = Compression.GZIP
    archiveExtension.set('tar.gz')
}

distZip {
    duplicatesStrategy = 'exclude'
}

release {
    failOnPublishNeeded = false
    failOnCommitNeeded = false
}

afterReleaseBuild.dependsOn generateWindowsInstallerInDocker